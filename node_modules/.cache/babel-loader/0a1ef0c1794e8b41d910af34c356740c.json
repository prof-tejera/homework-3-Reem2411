{"ast":null,"code":"var _jsxFileName = \"/Users/reem/Desktop/HES/FALL 2021/CS39/JS and Components/HW3/src/Pager/Pager.js\";\nimport { Component } from 'react'; // import Panel from 'components/Panel/Panel';\n\nimport Button from 'components/Button/Button';\nimport './Pager.css';\nimport Panel from 'components/Panel/Panel'; // class Pager extends Component {\n//   render() {\n//     return (\n//       <Panel backgroundColor=\"blue\">\n//         <Button text=\"<\" onClick={() => {}} />\n//         <Button text=\"1\" onClick={() => {}} />\n//         <Button text=\"2\" onClick={() => {}} color=\"green\" size=\"large\" />\n//         <Button text=\"3\" onClick={() => {}} color=\"red\" size=\"large\" />\n//         <Button text=\">\" onClick={() => {}} />\n//       </Panel>\n//     );\n//   }\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Pager extends Component {\n  constructor() {\n    super(); // Initalize page number \n    // The state contains data specific to this component that may change over time. - react website\n\n    this.state = {\n      page: 0\n    };\n  } // Then render each page as it is clicked on it\n\n\n  render() {\n    // PART 1 - Just create the bar \n    // Attach a page number attribute to track the number of pages to show  \n    const num_pages = this.props; // Create list of pages that will be rendered in the app \n\n    const pages_to_show = []; // Create a button for each page to make it more generic \n\n    for (let i = 0; i < num_pages; i++) {\n      // Add to list of pages that will be rendered in app \n      pages_to_show.push(\n      /*#__PURE__*/\n      // Use the same button function from mediabuttons \n      _jsxDEV(Button, {\n        text: i + 1,\n        page: i === this.state.curr,\n        onClick: () => {\n          console.log('In Page, button was clicked!', i); // update state using setState .. updating this.state doesn't work \n\n          this.setState({\n            page: i\n          });\n        }\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this));\n    } // Part 2 \n    // BONUS - What props can I pass in that will make the component more configurable?\n    // if (num_pages > 5) {\n    //   // Get the beginning of the pager and the end of it\n    //   const start = pages_to_show.slice(0,2);\n    //   const end = pages_to_show.slice(-1);\n    //   // return the pages to show \n    //   return (\n    //     {start},\n    //     {end});\n    // }\n\n\n    return /*#__PURE__*/_jsxDEV(Panel, {\n      children: [\" \", pages_to_show, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nexport default Pager;","map":{"version":3,"sources":["/Users/reem/Desktop/HES/FALL 2021/CS39/JS and Components/HW3/src/Pager/Pager.js"],"names":["Component","Button","Panel","Pager","constructor","state","page","render","num_pages","props","pages_to_show","i","push","curr","console","log","setState"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B,C,CACA;;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAO,aAAP;AACA,OAAOC,KAAP,MAAkB,wBAAlB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMC,KAAN,SAAoBH,SAApB,CAA8B;AAC5BI,EAAAA,WAAW,GAAI;AACb,YADa,CAGb;AACA;;AACA,SAAKC,KAAL,GAAa;AAACC,MAAAA,IAAI,EAAE;AAAP,KAAb;AACD,GAP2B,CAS5B;;;AACAC,EAAAA,MAAM,GAAG;AAEP;AACA;AACA,UAAMC,SAAS,GAAG,KAAKC,KAAvB,CAJO,CAMP;;AACA,UAAMC,aAAa,GAAG,EAAtB,CAPO,CASP;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,SAApB,EAA+BG,CAAC,EAAhC,EAAoC;AAElC;AAEAD,MAAAA,aAAa,CAACE,IAAd;AAAA;AACE;AACA,cAAC,MAAD;AAAgB,QAAA,IAAI,EAAED,CAAC,GAAC,CAAxB;AAA2B,QAAA,IAAI,EAAEA,CAAC,KAAK,KAAKN,KAAL,CAAWQ,IAAlD;AAAwD,QAAA,OAAO,EAAE,MAAM;AACrEC,UAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CJ,CAA5C,EADqE,CAGrE;;AACA,eAAKK,QAAL,CAAc;AAACV,YAAAA,IAAI,EAAEK;AAAP,WAAd;AACD;AALD,SAAaA,CAAb;AAAA;AAAA;AAAA;AAAA,cAFF;AASD,KAvBM,CAyBP;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAEA,wBAAO,QAAC,KAAD;AAAA,sBAASD,aAAT;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAlD2B;;AAwD9B,eAAeP,KAAf","sourcesContent":["import { Component } from 'react';\n// import Panel from 'components/Panel/Panel';\nimport Button from 'components/Button/Button';\nimport './Pager.css';\nimport Panel from 'components/Panel/Panel';\n\n// class Pager extends Component {\n//   render() {\n//     return (\n//       <Panel backgroundColor=\"blue\">\n//         <Button text=\"<\" onClick={() => {}} />\n//         <Button text=\"1\" onClick={() => {}} />\n//         <Button text=\"2\" onClick={() => {}} color=\"green\" size=\"large\" />\n//         <Button text=\"3\" onClick={() => {}} color=\"red\" size=\"large\" />\n//         <Button text=\">\" onClick={() => {}} />\n//       </Panel>\n//     );\n//   }\n// }\n\nclass Pager extends Component {\n  constructor () {\n    super(); \n\n    // Initalize page number \n    // The state contains data specific to this component that may change over time. - react website\n    this.state = {page: 0,}\n  }\n\n  // Then render each page as it is clicked on it\n  render (){\n\n    // PART 1 - Just create the bar \n    // Attach a page number attribute to track the number of pages to show  \n    const num_pages = this.props; \n    \n    // Create list of pages that will be rendered in the app \n    const pages_to_show = []\n\n    // Create a button for each page to make it more generic \n    for (let i = 0; i < num_pages; i++) {\n\n      // Add to list of pages that will be rendered in app \n\n      pages_to_show.push(\n        // Use the same button function from mediabuttons \n        <Button key={i} text={i+1} page={i === this.state.curr} onClick={() => {\n          console.log('In Page, button was clicked!', i); \n\n          // update state using setState .. updating this.state doesn't work \n          this.setState({page: i,});\n        }}/>,\n      );\n    }  \n    \n    // Part 2 \n    // BONUS - What props can I pass in that will make the component more configurable?\n    // if (num_pages > 5) {\n\n    //   // Get the beginning of the pager and the end of it\n    //   const start = pages_to_show.slice(0,2);\n    //   const end = pages_to_show.slice(-1);\n\n    //   // return the pages to show \n    //   return (\n    //     {start},\n    //     {end});\n    // }\n\n    return <Panel> {pages_to_show} </Panel>;\n  }\n}\n\n\n\n\nexport default Pager;\n"]},"metadata":{},"sourceType":"module"}